#!/usr/bin/env perl
#
# Generated from nofake.nw. Do not edit! Edit nofake.nw instead and
# run nofake on it:
#
#   ./nofake -Rnofake nofake.nw > nofake.pl
#   mv nofake.pl nofake
#   chmod a+x nofake
#
# The manual page is at the end of this file in Perl's
# POD format. You can format it using pod2man(1):
#
#   pod2man nofake > nofake.1
#   nroff -man nofake.1 | more
#
# The noweb source for this version is available at:
#
#   https://github.com/ctarbide/ctweb/blob/master/tools/nofake.nw
#
# This software is in the public domain; for details, see the manual
# page.

eval 'exec perl -wS $0 ${1+"$@"}'
    if 0;

use 5.008; # perl v5.8.0 was released on July 18, 2002
use strict;
use warnings FATAL => qw{uninitialized void inplace};
use Carp ();
$SIG{__DIE__} = \&Carp::confess;

local $\ = "\n";

sub version {
    print <<'EOF';
    (c) 2021 C. Tarbide <ctarbide@tuta.io>
    (c) 2002 Christian Lindig <lindig@eecs.harvard.edu>

    NoFake is derived from the public domain NegWeb 1.0.1
    http://boswa.com/misc/negweb by Darrell Johnson <darrell@boswa.com>.
EOF
}

my $lineformat = '#line %L "%F"%N';

# do not emit #line directives
my $sync = 0;

# hash tables for chunks and chunks options
my %chunks = ();
my %chunks_options = ();

my $list_roots = 0;

sub set_many (\%@) {
    my ($h, $k, @rest) = @_;
    if (defined($h->{$k})) {
        if (ref($h->{$k}) eq 'ARRAY') {
            push(@{ $h->{$k} }, @rest);
        } else {
            $h->{$k} = [$h->{$k}, @rest];
        }
    } elsif (@rest > 1) {
        $h->{$k} = [ @rest ];
    } elsif (@rest) {
        $h->{$k} = $rest[0];
    } else {
        Carp::carp("no value specified");
    }
}
sub get_many {
    # () yield undef in scalar context

    # return () instead of (undef)
    return () unless defined($_[0]);

    # return @{arg}
    return @{ $_[0] } if ref($_[0]) eq 'ARRAY';

    # return (arg)
    @_;
}
sub line_directive {
    my ($fname, $line) = @_;
    my $ret = $lineformat;
    $ret =~ s/%F/$fname/g;
    $ret =~ s/%L/$line/g;
    $ret =~ s/%N/\n/g;
    return $ret;
}
sub read_file {
    local @ARGV = @_;
    my $chunk = '';
    while (my $line = <>) {
        chomp($line);
        if ($line =~ m{^<<(.+?)>>=\s*$}) {
            $chunk = $1;
            if (!$chunks_options{$chunk}) {
                $chunks_options{$chunk} = {nextractions => 0};
            }
            $chunks_options{$chunk}->{nchunks}++;
        } elsif ($chunk) {
            if ($line =~ m{^\@(?:$|\s)}) {
                $chunk = '';
            } else {
                # regular line inside chunk
                $line =~ s,^\@\@,\@,;
                set_many(%chunks, $chunk, $ARGV, $., $line . "\n");
            }
        } else {
            if ($line =~ m{^(|.*?[^\@])<<} and $1 !~ m{\[\[}) {
                Carp::carp("WARNING: Unescaped << in documentation" .
                    " chunk at line ${ARGV}:${.}.");
            }
        }
    }
}
my %being_extracted = ();
sub extract {
    my ($prefix, $parent_fname, $parent_lnum, $chunk) = @_;
    if ($being_extracted{$chunk}) {
        Carp::croak("ERROR: Code chunk <<$chunk>> is used in its" .
            " own definition (at ${parent_fname}:${parent_lnum}).");
    }
    $being_extracted{$chunk}++;
    $chunks_options{$chunk}->{nextractions}++;
    my @res = ();
    my @input = get_many($chunks{$chunk});
    if ($list_roots and @input) {
        $chunks{$chunk} = [$input[0], $input[1], ""];
    }
    my $lnum_previous = -1;
    while (my ($fname, $lnum, $line) = splice(@input, 0, 3)) {
        if ($sync and $lnum != $lnum_previous + 1) {
            push(@res, [0, $fname, $lnum]);
        }
        my $found_chunk_ref;
        for (;;) {
            $found_chunk_ref = ($line =~ /^(|.*?[^\@])<<(.*?[^\@])>>(.*)/);
            if ($found_chunk_ref) {
                my $before = $1;
                my $chunkref = $2;
                my $after = $3;
                if ($chunks_options{$chunkref}) {
                    my $line_new = undef;
                    my @chunkreflines = extract($prefix . $before, $fname,
                        $lnum, $chunkref);
                    while (@chunkreflines and ref($chunkreflines[0])) {
                        # propagate special items early, before processing lines
                        push(@res, shift(@chunkreflines));
                    }
                    if (@chunkreflines > 1) {
                        # many lines
                        my $indent;
                        my $before_has_content = $before !~ m{^\s*$};
                        if ($before_has_content) {
                            $indent = ' ' x length($before);
                        } else {
                            $indent = $before;
                        }
                        my $first = shift(@chunkreflines);
                        my $last = pop(@chunkreflines);
                        if ($before_has_content or $first ne "\n") {
                            push(@res, $before . $first);
                        } else {
                            push(@res, "\n");
                        }
                        for (@chunkreflines) {
                            if (ref($_)) {
                                # deal with special items later
                                push(@res, $_);
                            } elsif ($_ ne "\n") {
                                push(@res, $indent . $_);
                            } else {
                                # no need to indent an empty line
                                push(@res, "\n");
                            }
                        }
                        if ($after) {
                            chomp($last);
                            $line_new = $indent . $last . $after . "\n";
                        } elsif ($last ne "\n") {
                            push(@res, $indent . $last);
                        } else {
                            # no need to indent an empty line
                            push(@res, "\n");
                        }
                    } elsif (@chunkreflines) {
                        # just 1 line
                        if ($after) {
                            chomp(my $tmp = $chunkreflines[0]);
                            $line_new = $before . $tmp . $after . "\n";
                        } else {
                            my $before_has_content = $before !~ m{^\s*$};
                            if ($before_has_content or $chunkreflines[0] ne "\n") {
                                push(@res, $before . $chunkreflines[0]);
                            } else {
                                push(@res, "\n");
                            }
                        }
                    } else {
                        Carp::carp("WARNING: Code chunk <<${chunkref}>> is" .
                            " empty (at ${fname}:${lnum}).");
                    }
                    if (defined($line_new)) {
                        $line = $line_new;
                        next;
                    }
                } else {
                    Carp::carp("WARNING: Code chunk <<${chunkref}>>" .
                        " does not exist (at ${fname}:${lnum}).");
                }
                $lnum = -1; # force line number directive
            } else {
                $line =~ s/\@(<<|>>)/$1/g;
                push(@res, $line);
            }
            last;
        }
        $lnum_previous = $lnum;
    }
    $being_extracted{$chunk}--;
    return @res;
}
sub usage {
    my $arg = shift @_;

    print STDERR <<EOF;
    Unknown command line argument "$arg". See the manual page for help
    which is also included at the end of this Perl script.

    nofake [-Rchunk ...] [-L[format]] [file] ...
    nofake [--version | -v]
    nofake [--list-all] [file] ...
    nofake [--list-roots] [file] ...
EOF
}

my @chunks = ();
my @files = ();
my $list_all = 0;
my $no_op = 0;
my $dump = 0;
my $load = 0;

while ($_ = shift(@ARGV)) {
    if (/^-L(.*)/) {
        $sync = 1;
        $lineformat = $1 if $1;
    }
    elsif (/^-R(.+)/)         { push(@chunks, $1) }
    elsif (/^-(v|-version)$/) { version(); exit(0) }
    elsif (/^--list-all$/)   { $list_all = 1 }
    elsif (/^--list-roots$/) { $list_roots = 1 }
    elsif (/^--no-op$/)      { $no_op = 1 }
    elsif (/^--dump=(.+)$/) { $dump = $1 }
    elsif (/^--dump$/)      { $dump = shift(@ARGV) }
    elsif (/^--load=(.+)$/) { $load = $1 }
    elsif (/^--load$/)      { $load = shift(@ARGV) }
    elsif (/^-filter$/) { shift(@ARGV) }
    elsif (/^(-.*)$/) { usage($1); exit(1) }
    else { push(@files, $_) }
}

if ($dump eq '-') {
    if ($list_all or $list_roots or @chunks) {
        Carp::croak("ERROR: Cannot write to stdout due to output ambiguity.");
    }
    $no_op = 1;
}

if ($load) {
    use Storable qw{lock_retrieve fd_retrieve};
    my $state;
    if ($load eq '-') {
        if (-t STDIN) {
            Carp::croak("ERROR: Will not load binary data from a terminal.");
        } else {
            $state = fd_retrieve(*STDIN);
        }
    } elsif (-f $load) {
        $state = lock_retrieve($load);
    } else {
        Carp::croak("ERROR: State file does not exist.");
    }
    %chunks_options = %{ $state->[0] };
    %chunks = %{ $state->[1] };
}

if ($load ne '-' and not @files) {
    push(@files, '-');
}
read_file($_) for @files;

if ($dump) {
    use Storable qw{lock_store store_fd};
    my $state = [\%chunks_options, \%chunks];
    if ($dump eq '-') {
        if (-t STDOUT) {
            Carp::croak("ERROR: Will not dump binary data to a terminal.");
        } else {
            store_fd($state, \*STDOUT);
        }
    } else {
        lock_store($state, $dump);
    }
}

if ($no_op) {
    # useful for documentation chunks validation and set when dumping to
    # stdout
} elsif ($list_all) {
    print("<<${_}>>") for sort(keys(%chunks_options));
} elsif ($list_roots) {
    my @all_chunks = sort(keys(%chunks_options));
    # first pass, extract all chunks
    for my $chunk (@all_chunks) {
        my $opts = $chunks_options{$chunk};
        my ($first_fname, $first_lnum) = get_many($chunks{$chunk});
        extract('', $first_fname, $first_lnum, $chunk);
    }
    # second pass, report
    for my $chunk (@all_chunks) {
        my $opts = $chunks_options{$chunk};
        if ($opts->{nextractions} == 1) {
            print("<<${chunk}>>");
        }
    }
} else {
    if (not @chunks) {
        push(@chunks, '*');
    }
    for my $chunk (@chunks) {
        if (!$chunks_options{$chunk}) {
            Carp::croak("ERROR: The root chunk <<${chunk}>> was" .
                " not defined.");
        }
    }
    for my $chunk (@chunks) {
        local $\ = undef;
        my ($first_fname, $first_lnum) = get_many($chunks{$chunk});
        for my $item (extract('', $first_fname, $first_lnum, $chunk)) {
            if (ref($item) eq 'ARRAY') {
                print line_directive($item->[1], $item->[2]);
            } else {
                print $item;
            }
        }
    }
}

__END__

=head1 NAME

nofake - notangle replacement for the noweb literate programming tool

=head1 SYNOPSIS

B<nofake> [B<-R>I<chunk> ...] [B<-L>[I<format>]] [B<--dump> state]
[B<--load> state] [I<file> ...]

B<nofake> [B<--version> | B<-v>]

B<nofake> [B<--list-all>] [I<file> ...]

B<nofake> [B<--list-roots>] [I<file> ...]

=head1 DESCRIPTION

Noweb(1) is a literate-programming tool like Knuth's WEB. A noweb file
contains program source code interleaved with documentation. Extracting
the source code for compilation requires notangle(1). To allow source
code to be shipped to users not using noweb(1), B<nofake> offers the
most commonly used functionality of notangle(1) as a simple perl(1)
script. Alas, B<nofake> extracts source code from a file in noweb(1)
syntax: B<nofake> reads I<file> and extracts the code chunke named
I<chunk> to stdout. If no I<file> is provided, B<nofake> reads from
stdin, if no I<chunk> is named, B<nofake> extracts the chunk C<*>.

=head1 OPTIONS

=over 4

=item B<-R>I<chunk>

Extract chunk I<chunk> (recursively) from the B<noweb> file and write it
to stdout.

=item B<-L>[I<format>]

B<nofake> emits cpp(1)-style C<#line> directives to allow a compiler
emit error messages that refer to I<file> rather than the extracted
source code directly.  The optional I<format> allows to provided the
format of the line directive: C<-L'#line %L "%F"%N'>. In I<format> C<%F>
indicates the name of the source file, C<%L> the line number, and C<%N>
a newline. The default C<#line %L "%F"%N> is suitable for C compilers.

=item B<--list-all>

List all I<chunks> in B<noweb> files.

=item B<--list-roots>

List all I<chunks> in B<noweb> files that are not referenced by other chunks.

=item B<--dump> state

Save the state after reading B<noweb> sources.

=item B<--load> state

Load a previously dumped state, this can speed things up if processing a large
set of documents and extracting various chunks individually from such set.

The dumping and loading of states shouldn't affect normal nofake operation, all
other options are available. Please note however that:

- This is not supported by B<notangle>.

- If loading state from stdin (using - as state), it is not possible to read
noweb document from stdin.

- If dumping state to stdout (using - as state), no -R option should be given.

- The default behaviour of reading from stdin is preserved if no input files are
given, unless loading state from stdin. Thus, when dumping and loading state,
these works as expected:

    nofake -Rdefaults --dump state nofake.nw

    nofake -Rdefaults --load - <state

    nofake -Rdefaults --load state </dev/null

    cat state | nofake -Rdefaults --load -

    nofake --dump - nofake.nw | nofake -Rdefaults --load -

    nofake --dump - nofake.nw | nofake -Rdefaults --load - nofake.nw

=back

=head1 SYNTAX OF NOWEB FILES

The authoritive source for the syntax of noweb files is the noweb(1)
documentation. However, here is an example:

    <<hello.c>>=
    <<includes>>

    int main(int argc, char** argv)
    {
        <<say hello>>
        return 0;
    }

    <<say hello>>=
    printf("Hello World!\n");
    @

    <<includes>>=
    #include <stdio.h> /* for printf */
    @

A chunk is defined by C<E<lt>E<lt>chunkE<gt>E<gt>=> and reaches up
to the next definition or a line starting with C<@> followed by a
space or newline. A chunk can recursivley refer to other chunks:
chunk C<hello.c> refers to C<includes> and C<say hello>. A chunk
is referred to by C<E<lt>E<lt>chunkE<gt>E<gt>>. To use the
C<E<lt>E<lt>> and C<E<gt>E<gt>> character literally in a program,
precede them with a C<@>. Double C<@> on the first column to put
a literal C<@> there, applies only to the first column.

=head1 LIMITATIONS

The B<nofake> architecture is simpler than that of notangle(1) and
therefore one thing do not work. In particular:

=over 4

=item *

B<nofake> does not accept the B<-filter> I<command> option that
B<notangle> uses to filter chunks before they are emitted.

=back

=head1 COPYING

This software is in the public domain.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR AND COPYRIGHT HOLDER BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

=head1 AUTHOR

Christian Lindig <lindig@eecs.harard.edu>

Please note that this is a derived work and is not maintained
by Lindig, the canonical source for this version is
https://github.com/ctarbide/ctweb/blob/master/tools/nofake.nw.

=head1 SEE ALSO

noweb(1), notangle(1), perl(1), cpp(1)

Norman Ramsey, Literate programming simplified, IEEE Software
11(5):97-105, September 1994.
