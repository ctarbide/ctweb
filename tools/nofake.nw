% vim: ts=8 et sw=4:

\def\nofake{{\small NOFAKE}}
\def\noweb{{\small NOWEB}}
\def\notangle{\texttt{notangle}}

% l2h substitution nofake NOFAKE
% l2h substitution noweb NOWEB
% l2h substitution notangle NOTANGLE

% ------------------------------------------------------------------
\section{NoFake}
% ------------------------------------------------------------------

{\nofake} is a Perl script that acts as a simple substitute for the
{\notangle} command from the {\noweb} literate programming system. When
using {\noweb}, program documentation and source code are kept together
in a single file (by convention named with the \texttt{.nw} suffix). The
{\notangle} command takes such a \emph{noweb} file and extracts the
source code from it for compilation. However, not everybody who wants to
compile the source code has a full {\noweb} installation available. For
these cases {\nofake} can be shipped with the source code to provide a
substitute for the {\notangle} command. {\nofake} has a much simpler and
less general architecture than {\notangle} and can handle only the most
common cases correctly. Therefore it is no substitute during program
development.

{\nofake} is derived from NegWeb 1.0.1 that was released by its author
Darrell Johnson \path|<darrell@boswa.com>| into the public domain at
\path|http://boswa.com/misc/negweb/|.

Note that quoting hell is upon you: this source is itself a literate
program in {\noweb} syntax. It has to use the delimiters [[@<<]] and
[[@>>]] literally and hence has to escape them with a preceding [[@]].

% ------------------------------------------------------------------
\subsection{Manual Page}
% ------------------------------------------------------------------

Perl manual pages are written in Perl's Plain Old Document ({\small
POD}) format. They can be included into a script and extracted from
there: [[pod2man nofake > nofake.1]]; various other format can be
generated as well, including {\small HTML}.  This makes sure they do
not get lost when the script is passed around. For the syntax, see the
\texttt{perlpod} manual.

<<manual page in POD format>>=
=head1 NAME

nofake - simple notangle replacement for the Noweb literate programming tool

=head1 SYNOPSIS

B<nofake> [B<-R>I<chunk> ...] [B<-L>[I<format>]] [I<file>] ...

B<nofake> [B<--version>|B<-v>]

B<nofake> [B<--list-all>] [I<file>] ...

B<nofake> [B<--list-roots>] [I<file>] ...

=head1 DESCRIPTION

Noweb(1) is a literate-programming tool like Knuth's WEB. A noweb file
contains program source code interleaved with documentation. Extracting
the source code for compilation requires notangle(1). To allow source
code to be shipped to users not using noweb(1), B<nofake> offers the
most commonly used functionality of notangle(1) as a simple perl(1)
script. Alas, B<nofake> extracts source code from a file in noweb(1)
syntax: B<nofake> reads I<file> and extracts the code chunke named
I<chunk> to stdout. If no I<file> is provided, B<nofake> reads from
stdin, if no I<chunk> is named, B<nofake> extracts the chunk C<*>.

=head1 OPTIONS

=over 4

=item B<-R>I<chunk>

Extract chunk I<chunk> (recursively) from the noweb file and write it to
stdout.

=item B<-L>[I<format>]

B<nofake> emits cpp(1)-style C<#line> directives to allow a compiler
emit error messages that refer to I<file> rather than the extracted
source code directly.  The optional I<format> allows to provided the
format of the line directive: C<-L'#line %L "%F"%N'>. In I<format> C<%F>
indicates the name of the source file, C<%L> the line number, and C<%N>
a newline. The default C<#line %L "%F"%N> is suitable for C compilers.

=item B<--list-all>

List all I<chunks> in noweb files.

=item B<--list-roots>

List all I<chunks> in noweb files that are not referenced by other chunks.

=back

=head1 SYNTAX OF NOWEB FILES

The authoritive source for the syntax of noweb files is the noweb(1)
documentation. However, here is an example:

    @<<hello.c@>>=
    @<<includes@>>

    int main(int argc, char** argv)
    {
        @<<say hello@>>
        return 0;
    }

    @<<say hello@>>=
    printf("Hello World!\n");
    @

    @<<includes@>>=
    #include <stdio.h> /* for printf */
    @

A chunk is defined by C<E<lt>E<lt>chunkE<gt>E<gt>=> and reaches up
to the next definition or a line starting with C<@> followed by a
space or newline. A chunk can recursivley refer to other chunks:
chunk C<hello.c> refers to C<includes> and C<say hello>. A chunk
is referred to by C<E<lt>E<lt>chunkE<gt>E<gt>>. To use the
C<E<lt>E<lt>> and C<E<gt>E<gt>> character literally in a program,
precede them with a C<@>.

=head1 LIMITATIONS

The B<nofake> architecture is simpler than that of notangle(1) and
therefore one thing do not work. In particular:

=over 4

=item *

B<nofake> does not accept the B<-filter> I<command> option that
B<notangle> uses to filter chunks before they are emitted.

=back

=head1 COPYING

This software is in the public domain.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR AND COPYRIGHT HOLDER BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

=head1 AUTHOR

Christian Lindig <lindig@eecs.harard.edu>

=head1 SEE ALSO

noweb(1), notangle(1), perl(1), cpp(1)

Norman Ramsey, Literate programming simplified, IEEE Software
11(5):97-105, September 1994.
@

% ------------------------------------------------------------------
\subsection{Implementation}
% ------------------------------------------------------------------

<<nofake>>=
#!/usr/bin/env perl
#
# Generated from nofake.nw. Do not edit! Edit nofake.nw instead and
# run nofake on it:
#
#   ./nofake -Rnofake nofake.nw > nofake.pl
#   mv nofake.pl nofake
#   chmod a+x nofake
#
# The manual page is at the end of this file in Perl's
# POD format. You can format it using pod2man(1):
#
#   pod2man nofake > nofake.1
#   nroff -man nofake.1 | more
#
# The noweb source for this version is available at:
#
#   https://github.com/ctarbide/ctweb/blob/master/tools/nofake.nw
#
# This software is in the public domain; for details, see the manual
# page.

eval 'exec perl -wS $0 ${1+"$@"}'
    if 0;

use strict;
use warnings FATAL => 'uninitialized';
use 5.010; # perl v5.10 was released on December 18, 2007
use Carp ();
$SIG{__DIE__} = \&Carp::confess;

local $\ = "\n";

sub version {
    print @<<'EOF';
    (c) 2021 C. Tarbide <ctarbide@tuta.io>
    (c) 2002 Christian Lindig <lindig@eecs.harvard.edu>

    NoFake is derived from the public domain NegWeb 1.0.1
    http://boswa.com/misc/negweb by Darrell Johnson <darrell@boswa.com>.
EOF
}

<<defaults>>

<<many utils>>
<<line directive>>
<<read file>>
<<sub extract>>
<<sub usage>>

<<process command line and extract chunk>>

__END__

<<manual page in POD format>>
@

% ------------------------------------------------------------------
\subsection{Variables}
% ------------------------------------------------------------------

All (code) chunks are stored in the global hash table [[chunks]]. A
chunk may contain references to other chunks. These are ignored when a
chunk is read and expanded when then chunk itself is expanded.

<<defaults>>=
my $lineformat = '#line %L "%F"%N';   # default format for #line directive
my $sync = 0;                         # default: do not emit #line directives

my %chunks = ();                      # hash table for chunks
my %chunks_options = ();              # hash table for chunks options

my $list_all = 0;                     # list all chunks
my $list_roots = 0;                   # list only root chunks
@

% ------------------------------------------------------------------
\subsection{Functions}
% ------------------------------------------------------------------

If we compile source code that was extracted from a noweb file, we want
the error messages point to the noweb file and not the file extracted
from it. Therefore we emit [[#line]] directives that connect the
extracted file back with the noweb file. They are understood by many
compilers such that they can emit error messages pointing to the noweb
file.

The [[line_directive]] returns the string to be used as a line
directive. The formatting is taken from [[lineformat]] that is
controlled by the [[-L]] command line option.

<<line directive>>=
sub line_directive {
    my ($fname, $line) = @_;
    my $ret = $lineformat;
    $ret =~ s/%F/$fname/g;
    $ret =~ s/%L/$line/g;
    $ret =~ s/%N/\n/g;
    return $ret;
}
@

The [[read_line]] function reads a file line-by-line and recognizes
chunk definitions. Each chunk is put under its name into the global
[[chunks]] hash table. The [[sync]] flag controls whether line
directives are emitted.

Relevant [[man noweb]] section: Documentation chunks begin with
a line that starts with an at sign ([[@]]) followed by a space
or newline.

<<read line vars>>=
my $chunk = '';
<<read line>>=
if ($line =~ m{^@<<(.+?)@>>=\s*$}) {
    $chunk = $1;
    if (!$chunks_options{$chunk}) {
        $chunks_options{$chunk} = {nextractions => 0};
    }
    $chunks_options{$chunk}->{nchunks}++;
} elsif ($chunk) {
    if ($line =~ m{^\@$}) {
        $chunk = '';
    } elsif ($line =~ m{^\@\s}) {
        $chunk = '';
    } else {
        # regular line inside chunk
        set_many(%chunks, $chunk, $ARGV, $., $line . "\n");
    }
} # else outside chunk - nothing to do
@

<<read file>>=
sub read_file {
    local @ARGV = @_;
    <<read line vars>>
    while (my $line = <>) {
        chomp($line);
        <<read line>>
    }
}
@

The [[extract]] function takes a chunk name and extracts this chunk
recursively from the [[chunks]] hash table. The output is returned as a
string.

While we look for chunk names in lines to extract we have to be
careful: if a chunk name delimiter is preceded by a an [[@]] it does
not denote a chunk, but the delimiter literally.

When dealing with line numbers, {\nofake} prioritize document structure,
{\notangle} is more liberal in breaking lines to put line directives.

<<setup $before_has_content>>=
my $before_has_content = $before !~ m{^\s*$};
<<setup $indent and $before_has_content>>=
my $indent;
<<setup $before_has_content>>
if ($before_has_content) {
    $indent = ' ' x length($before);
} else {
    $indent = $before;
}
@

Special item [[0]] is a line directive, at the chunk
reference preamble.

<<push line at chunk preamble>>=
push(@res, [0, $fname, $chunkreflnum]);
@

Special item [[1]] is also line directive, but at the chunk
reference epilog.

<<push line after chunk reference>>=
push(@res, [1, $fname, $lnum]);
@

These special items will be processed at the top level, after all
files have been read.

<<propagate header special items>>=
while (@chunkreflines and ref($chunkreflines[0])) {
    # propagate special items early, before processing lines
    push(@res, shift(@chunkreflines));
}
@

<<process chunk reference>>=
my $line_new = undef;
<<extract and process chunk reference>>
if (defined($line_new)) {
    $line = $line_new;
} else {
    last;
}
@

<<extract and process chunk reference>>=
my ($chunkreffname, $chunkreflnum, @chunkreflines) = extract($prefix . $before, $fname, $lnum, $chunkref);
if ($sync) { <<push line at chunk preamble>> }
<<propagate header special items>>
if (@chunkreflines > 1) {
    # many lines
    <<setup $indent and $before_has_content>>
    my $first = shift(@chunkreflines);
    my $last = pop(@chunkreflines);
    if ($before_has_content or $first ne "\n") {
        push(@res, $before . $first);
    } else {
        push(@res, "\n");
    }
    for (@chunkreflines) {
        if (ref($_)) {
            # deal with special items later
            push(@res, $_);
        } elsif ($_ ne "\n") {
            push(@res, $indent . $_);
        } else {
            # no need to indent an empty line
            push(@res, "\n");
        }
    }
    if ($after) {
        chomp($last);
        $line_new = $indent . $last . $after . "\n";
    } elsif ($last ne "\n") {
        push(@res, $indent . $last);
    } else {
        # no need to indent an empty line
        push(@res, "\n");
    }
} elsif (@chunkreflines) {
    # just 1 line
    if ($after) {
        chomp(my $tmp = $chunkreflines[0]);
        $line_new = $before . $tmp . $after . "\n";
    } else {
        <<setup $before_has_content>>
        if ($before_has_content or $chunkreflines[0] ne "\n") {
            push(@res, $before . $chunkreflines[0]);
        } else {
            push(@res, "\n");
        }
    }
} else {
    Carp::carp("warning: code chunk @<<${chunkref}@>> is empty (at ${fname}:${lnum}).");
}
@

<<process line vars>>=
my $lnum_show_next = 0;
<<process line>>=
my $found_chunk_ref;
for (;;) {
    $found_chunk_ref = ($line =~ /^(|.*?[^\@])@<<(.*?[^\@])@>>(.*)$/o);
    if ($found_chunk_ref) {
        my $before = $1;
        my $chunkref = $2;
        my $after = $3;
        if ($chunks_options{$chunkref}) {
            <<process chunk reference>>
        } else {
            Carp::carp("warning: code chunk @<<${chunkref}@>> does not exist (at ${fname}:${lnum}).");
            last;
        }
        $lnum_show_next = 1;
    } else {
        if ($sync && $lnum_show_next) {
            <<push line after chunk reference>>
            $lnum_show_next = 0;
        }
        $line =~ s/\@(@<<|@>>)/$1/og;
        push(@res, $line);
        last;
    }
}
@

a chunk referenced at least once is definitely a non-root chunk, so we need to
render all chunks at most once

<<remove chunk data if listing roots>>=
if ($list_roots) {
    $chunks{$chunk} = [
        $representative_fname,
        $representative_lnum,
        ""
    ];
}
@

<<sub extract>>=
my %being_extracted = ();
sub extract {
    my ($prefix, $parent_fname, $parent_lnum, $chunk) = @_;
    if ($being_extracted{$chunk}) {
        Carp::croak("error: code chunk @<<$chunk@>> is used in its own definition (at ${parent_fname}:${parent_lnum}).");
    }
    $being_extracted{$chunk}++;
    $chunks_options{$chunk}->{nextractions}++;
    my @res = ();
    my @input = get_many($chunks{$chunk});
    my $representative_fname = $input[0] if @input;
    my $representative_lnum = $input[1] if @input;
    <<remove chunk data if listing roots>>
    <<process line vars>>
    while (my ($fname, $lnum, $line) = splice(@input, 0, 3)) {
        <<process line>>
    }
    $being_extracted{$chunk}--;
    return $representative_fname, $representative_lnum, @res;
}
@

<<sub usage>>=
sub usage {
    my $arg = shift @_;

    print STDERR <<EOF;
    Unknown command line argument "$arg". See the manual page for help
    which is also included at the end of this Perl script.

    nofake [-Rchunk ...] [-L[format]] [file] ...
    nofake [--version|-v]
    nofake [--list-all] [file] ...
    nofake [--list-roots] [file] ...
EOF
}
@

We parse the command line and start working: reading the noweb files and then
extracting each chunk in the [[chunks]] variable.

<<process command line and extract chunk>>=
my @chunks = ();
my @files = ();

while ($_ = shift(@ARGV)) {
    if (/^\-L(.*)/)             { $sync = 1; if ($1 ne '') { $lineformat = $1 }}
    elsif (/^\-R(.+)/)          { push(@chunks, $1) }
    elsif (/^\-(v|-version)$/)  { version(); exit(0) }
    elsif (/^\--list-all$/)     { $list_all = 1 }
    elsif (/^\--list-roots$/)   { $list_roots = 1 }
    elsif (/^\-filter$/)        { shift(@ARGV) }  # ignore
    elsif (/^(\-.*)$/)          { usage($1); exit(1) }
    else                        { push(@files, $_) }
}

if (!@chunks) {
    push(@chunks, '*');
}

if (!@files) {
    push(@files, '-');
}

read_file($_) for @files;

if ($list_all) {
    print("@<<${_}@>>") for sort(keys(%chunks_options));
} elsif ($list_roots) {
    <<output roots>>
} else {
    <<output lines>>
}
@

Create an anonymous block to contain local vars.

<<output lines of $chunk>>=
local $\ = undef;
my ($first_fname, $first_lnum) = get_many($chunks{$chunk});
my ($representative_fname, $representative_lnum, @res) = extract('', $first_fname, $first_lnum, $chunk);
print line_directive($representative_fname, $representative_lnum) if $sync;
for my $item (@res) {
    if (ref($item) eq 'ARRAY') {
        print line_directive($item->[1], $item->[2]);
    } else {
        print $item;
    }
}
@

<<verify $chunk is defined>>=
if (!$chunks_options{$chunk}) {
    Carp::croak("The root chunk @<<${chunk}@>> was not defined.");
}
@

<<output lines>>=
for my $chunk (@chunks) {
    <<verify $chunk is defined>>
}
for my $chunk (@chunks) {
    <<output lines of $chunk>>
}
@

<<output roots>>=
my @all_chunks = sort(keys(%chunks_options));
# first pass, extract all chunks
for my $chunk (@all_chunks) {
    my $opts = $chunks_options{$chunk};
    my ($first_fname, $first_lnum) = get_many($chunks{$chunk});
    extract('', $first_fname, $first_lnum, $chunk);
}
# second pass, report
for my $chunk (@all_chunks) {
    my $opts = $chunks_options{$chunk};
    if ($opts->{nextractions} == 1) {
        print("@<<${chunk}@>>");
    }
}
@

<<many utils>>=
sub set_many (\%@) {
    my ($h, $k, @rest) = @_;
    if (defined($h->{$k})) {
        if (ref($h->{$k}) eq 'ARRAY') {
            push(@{ $h->{$k} }, @rest);
        } else {
            $h->{$k} = [$h->{$k}, @rest];
        }
    } elsif (@rest > 1) {
        $h->{$k} = [ @rest ];
    } elsif (@rest) {
        $h->{$k} = $rest[0];
    } else {
        Carp::carp("no value specified");
    }
}
sub get_many {
    # () yield undef in scalar context
    return () unless defined($_[0]);              # return () instead of (undef)
    return @{ $_[0] } if ref($_[0]) eq 'ARRAY';   # return @{arg}
    @_;                                           # return (arg)
}
@
