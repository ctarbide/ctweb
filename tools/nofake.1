.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "NOFAKE 1"
.TH NOFAKE 1 "2024-02-23" "perl v5.8.9" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
nofake \- notangle replacement for the noweb literate programming tool
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBnofake\fR [\fB\-R\fR\fIchunk\fR ...] [\fB\-L\fR[\fIformat\fR]] [\fB\-\-dump\fR state]
[\fB\-\-load\fR state] [\fB\-\-error\fR] [\fIfile\fR ...]
.PP
\&\fBnofake\fR [\fB\-\-version\fR | \fB\-v\fR]
.PP
\&\fBnofake\fR [\fB\-\-list\-all\fR] [\fIfile\fR ...]
.PP
\&\fBnofake\fR [\fB\-\-list\-roots\fR] [\fIfile\fR ...]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBNoweb\fR\|(1) is a literate-programming tool like Knuth's \s-1WEB. A\s0 noweb file
contains program source code interleaved with documentation. Extracting
the source code for compilation requires \fBnotangle\fR\|(1). To allow source
code to be shipped to users not using \fBnoweb\fR\|(1), \fBnofake\fR offers the
most commonly used functionality of \fBnotangle\fR\|(1) as a simple \fBperl\fR\|(1)
script. Alas, \fBnofake\fR extracts source code from a file in \fBnoweb\fR\|(1)
syntax: \fBnofake\fR reads \fIfile\fR and extracts the code chunk named
\&\fIchunk\fR to stdout. If no \fIfile\fR is provided, \fBnofake\fR reads from
stdin, if no \fIchunk\fR is named, \fBnofake\fR extracts the chunk \f(CW\*(C`*\*(C'\fR.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-R\fR\fIchunk\fR" 4
.IX Item "-Rchunk"
Extract chunk \fIchunk\fR (recursively) from the \fBnoweb\fR file and write it
to stdout.
.IP "\fB\-L\fR[\fIformat\fR]" 4
.IX Item "-L[format]"
\&\fBnofake\fR emits \fBcpp\fR\|(1)\-style \f(CW\*(C`#line\*(C'\fR directives to allow a compiler
emit error messages that refer to \fIfile\fR rather than the extracted
source code directly.  The optional \fIformat\fR allows to provided the
format of the line directive: \f(CW\*(C`\-L\*(Aq#line %L "%F"%N\*(Aq\*(C'\fR. In \fIformat\fR \f(CW%F\fR
indicates the name of the source file, \f(CW%L\fR the line number, and \f(CW%N\fR
a newline. The default \f(CW\*(C`#line %L "%F"%N\*(C'\fR is suitable for C compilers.
.IP "\fB\-\-list\-all\fR" 4
.IX Item "--list-all"
List all \fIchunks\fR in \fBnoweb\fR files.
.IP "\fB\-\-list\-roots\fR" 4
.IX Item "--list-roots"
List all \fIchunks\fR in \fBnoweb\fR files that are not referenced by other chunks.
.IP "\fB\-\-dump\fR state" 4
.IX Item "--dump state"
Save the state after reading \fBnoweb\fR sources.
.IP "\fB\-\-load\fR state" 4
.IX Item "--load state"
Load a previously dumped state, this can speed things up if processing a large
set of documents and extracting various chunks individually from such set.
.Sp
The dumping and loading of states shouldn't affect normal nofake operation, all
other options are available. Please note however that:
.Sp
\&\- This is not supported by \fBnotangle\fR.
.Sp
\&\- If loading state from stdin (using \- as state), it is not possible to read
noweb document from stdin.
.Sp
\&\- If dumping state to stdout (using \- as state), no \-R option should be given.
.Sp
\&\- The default behaviour of reading from stdin is preserved if no input files are
given, unless loading state from stdin. Thus, when dumping and loading state,
these works as expected:
.Sp
.Vb 1
\&    nofake \-Rdefaults \-\-dump state nofake.nw
\&
\&    nofake \-Rdefaults \-\-load \- <state
\&
\&    nofake \-Rdefaults \-\-load state </dev/null
\&
\&    cat state | nofake \-Rdefaults \-\-load \-
\&
\&    nofake \-\-dump \- nofake.nw | nofake \-Rdefaults \-\-load \-
\&
\&    nofake \-\-dump \- nofake.nw | nofake \-Rdefaults \-\-load \- nofake.nw
.Ve
.IP "\fB\-\-error\fR" 4
.IX Item "--error"
Treat warnings as errors.
.SH "SYNTAX OF NOWEB FILES"
.IX Header "SYNTAX OF NOWEB FILES"
The authoritive source for the syntax of noweb files is the \fBnoweb\fR\|(1)
documentation. However, here is an example:
.PP
.Vb 2
\&    <<hello.c>>=
\&    <<includes>>
\&
\&    int main(int argc, char** argv)
\&    {
\&        <<say hello>>
\&        return 0;
\&    }
\&
\&    <<say hello>>=
\&    printf("Hello World!\en");
\&    @
\&
\&    <<includes>>=
\&    #include <stdio.h> /* for printf */
\&    @
.Ve
.PP
A chunk is defined by \f(CW\*(C`<<chunk>>=\*(C'\fR and reaches up
to the next definition or a line starting with \f(CW\*(C`@\*(C'\fR followed by a
space or newline. A chunk can recursivley refer to other chunks:
chunk \f(CW\*(C`hello.c\*(C'\fR refers to \f(CW\*(C`includes\*(C'\fR and \f(CW\*(C`say hello\*(C'\fR. A chunk
is referred to by \f(CW\*(C`<<chunk>>\*(C'\fR. To use the
\&\f(CW\*(C`<<\*(C'\fR and \f(CW\*(C`>>\*(C'\fR character literally in a program,
precede them with a \f(CW\*(C`@\*(C'\fR. Double \f(CW\*(C`@\*(C'\fR on the first column to put
a literal \f(CW\*(C`@\*(C'\fR there, applies only to the first column.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
The \fBnofake\fR architecture is simpler than that of \fBnotangle\fR\|(1) and
therefore one thing do not work. In particular:
.IP "\(bu" 4
\&\fBnofake\fR does not accept the \fB\-filter\fR \fIcommand\fR option that
\&\fBnotangle\fR uses to filter chunks before they are emitted.
.SH "COPYING"
.IX Header "COPYING"
This software is in the public domain.
.PP
\&\s-1THIS SOFTWARE IS PROVIDED\s0 ``\s-1AS IS\s0'' \s-1AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.\s0  \s-1IN NO EVENT SHALL THE AUTHOR AND COPYRIGHT HOLDER BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
OR CONSEQUENTIAL DAMAGES\s0 (\s-1INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES\s0; \s-1LOSS OF USE, DATA, OR
PROFITS\s0; \s-1OR BUSINESS INTERRUPTION\s0) \s-1HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT\s0 (\s-1INCLUDING NEGLIGENCE OR OTHERWISE\s0) \s-1ARISING IN ANY WAY OUT OF
THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Christian Lindig <lindig@eecs.harard.edu>
.PP
Please note that this is a derived work and is not maintained
by Lindig, the canonical source for this version is
https://github.com/ctarbide/ctweb/blob/master/tools/nofake.nw.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBnoweb\fR\|(1), \fBnotangle\fR\|(1), \fBperl\fR\|(1), \fBcpp\fR\|(1)
.PP
Norman Ramsey, Literate programming simplified, \s-1IEEE\s0 Software
11(5):97\-105, September 1994.
